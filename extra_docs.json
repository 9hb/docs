{
	"globals_patch": [],
	"globals_merge": {
		"bit": {
			"arshift": {
				"name": "bit.arshift",
				"description": "Returns the bitwise arithmetic right-shift of its first argument by the number of bits given by the second argument.\nArithmetic right-shift treats the most-significant bit as a sign bit and replicates it.\nOnly the lower 5 bits of the shift count are used (reduces to the range [0..31]).",
				"args": [
					{
						"name": "x",
						"description": "number",
						"type": "number"
					},
					{
						"name": "n",
						"description": "number of bits",
						"type": "number"
					}
				]
			},
			"band": {
				"name": "bit.band",
				"description": "Returns the bitwise and of all of its arguments. Note that more than two arguments are allowed.",
				"args": [
					{
						"name": "x1",
						"description": "number",
						"type": "number"
					},
					{
						"name": "[x2...]",
						"description": "number(s)",
						"type": "number"
					}
				]
			},
			"bnot": {
				"name": "bit.bnot",
				"description": "Returns the bitwise not of its argument.",
				"args": [
					{
						"name": "x",
						"description": "number",
						"type": "number"
					}
				]
			},
			"bor": {
				"name": "bit.bor",
				"description": "Returns the bitwise or of all of its arguments. Note that more than two arguments are allowed.",
				"args": [
					{
						"name": "x1",
						"description": "number",
						"type": "number"
					},
					{
						"name": "[x2...]",
						"description": "number(s)",
						"type": "number"
					}
				]
			},
			"bswap": {
				"name": "bit.bswap",
				"description": "Swaps the bytes of its argument and returns it. This can be used to convert little-endian 32 bit numbers to big-endian 32 bit numbers or vice versa.",
				"args": [
					{
						"name": "x",
						"description": "number",
						"type": "number"
					}
				]
			},
			"bxor": {
				"name": "bit.bxor",
				"description": "Returns the bitwise xor of all of its arguments. Note that more than two arguments are allowed.",
				"args": [
					{
						"name": "x1",
						"description": "number",
						"type": "number"
					},
					{
						"name": "[x2...]",
						"description": "number(s)",
						"type": "number"
					}
				]
			},
			"lshift": {
				"name": "bit.lshift",
				"description": "Returns the bitwise logical left-shift of its first argument by the number of bits given by the second argument.\nLogical shifts treat the first argument as an unsigned number and shift in 0-bits.\nOnly the lower 5 bits of the shift count are used (reduces to the range [0..31]).",
				"args": [
					{
						"name": "x",
						"description": "number",
						"type": "number"
					},
					{
						"name": "n",
						"description": "number of bits",
						"type": "number"
					}
				]
			},
			"rol": {
				"name": "bit.rol",
				"description": "Returns the bitwise left rotation of its first argument by the number of bits given by the second argument. Bits shifted out on one side are shifted back in on the other side.\nOnly the lower 5 bits of the rotate count are used (reduces to the range [0..31]).",
				"args": [
					{
						"name": "x",
						"description": "number",
						"type": "number"
					},
					{
						"name": "n",
						"description": "number of bits",
						"type": "number"
					}
				]
			},
			"ror": {
				"name": "bit.ror",
				"description": "Returns the bitwise right rotation of its first argument by the number of bits given by the second argument. Bits shifted out on one side are shifted back in on the other side.\nOnly the lower 5 bits of the rotate count are used (reduces to the range [0..31]).",
				"args": [
					{
						"name": "x",
						"description": "number",
						"type": "number"
					},
					{
						"name": "n",
						"description": "number of bits",
						"type": "number"
					}
				]
			},
			"rshift": {
				"name": "bit.rshift",
				"description": "Returns the bitwise logical right-shift of its first argument by the number of bits given by the second argument.\nLogical shifts treat the first argument as an unsigned number and shift in 0-bits.\nOnly the lower 5 bits of the shift count are used (reduces to the range [0..31]).",
				"args": [
					{
						"name": "x",
						"description": "number",
						"type": "number"
					},
					{
						"name": "n",
						"description": "number of bits",
						"type": "number"
					}
				]
			},
			"tobit": {
				"name": "bit.tobit",
				"description": "Normalizes a number to the numeric range for bit operations and returns it. This function is usually not needed since all bit operations already normalize all of their input arguments.",
				"args": [
					{
						"name": "x",
						"description": "number to normalize",
						"type": "number"
					}
				]
			},
			"tohex": {
				"name": "bit.tohex",
				"description": "Converts its first argument to a hex string. The number of hex digits is given by the absolute value of the optional second argument. Positive numbers between 1 and 8 generate lowercase hex digits. Negative numbers generate uppercase hex digits. Only the least-significant 4*|n| bits are used. The default is to generate 8 lowercase hex digits.",
				"args": [
					{
						"name": "x",
						"description": "number to convert",
						"type": "number"
					},
					{
						"name": "n",
						"description": "number of hex digits to return",
						"type": "number"
					}
				]
			}
		},
		"cvar": {
			"set_string": {
				"name": "cvar_object:set_string",
				"description": "Sets the int, float and string value to the passed float. Invokes the change callback"
			},
			"get_string": {
				"name": "cvar_object:get_string"
			},
			"set_float": {
				"name": "cvar_object:set_float",
				"description": "Sets the int, float and string value to the passed float. Invokes the change callback"
			},
			"set_raw_float": {
				"name": "cvar_object:set_raw_float"
			},
			"get_float": {
				"name": "cvar_object:get_float"
			},
			"set_int": {
				"name": "cvar_object:set_int",
				"description": "Sets the int, float and string value to the passed float. Invokes the change callback"
			},
			"set_raw_int": {
				"name": "cvar_object:set_raw_int"
			},
			"get_int": {
				"name": "cvar_object:get_int"
			},
			"invoke_callback": {
				"name": "cvar_object:invoke_callback",
				"args": [
					{
						"name": "...",
						"description": "Arguments passed to the callback"
					}
				],
				"description": "Executes a ConCommand or cvar callback, passing its arguments to it"
			}
		},
		"client": {
			"camera_angles": {
				"description": "Get or set camera angles",
				"args": [
					{
						"name": "pitch",
						"description": "Pitch"
					},
					{
						"name": "yaw",
						"description": "Yaw"
					}
				]
			},
			"unset_event_callback": {
				"name": "client.unset_event_callback",
				"description": "Removes the event callback for the passed event name and function. Raises an error and prints a message in console upon failure.",
				"args": [
					{
						"name": "event_name",
						"description": "Name of the event."
					},
					{
						"name": "callback",
						"description": "Registered lua callback to remove."
					}
				]
			},
			"key_state": {
				"name": "client.key_state",
				"description": "Returns true if the key is pressed, or nil on failure",
				"args": [
					{
						"name": "key",
						"description": "Virtual key code of the key as integer. [List of virtual key codes](https://docs.microsoft.com/en-us/windows/desktop/inputdev/virtual-key-codes)"
					}
				]
			},
			"update_player_list": {
				"name": "client.update_player_list",
				"description": "Updates the player list tab without having to open it.",
				"args": []
			},
			"error_log": {
				"name": "client.error_log",
				"description": "Logs a message to console in the error format and plays the sound (If Hide from OBS is disabled)",
				"args": [
					{
						"name": "msg",
						"description": "The error message"
					},
					{
						"name": "...",
						"description": "Optional comma-separated arguments to concatenate with msg."
					}
				]
			},
			"system_time": {
				"description": "Returns windows time as (hours, minutes, seconds, milliseconds)",
				"return_type": "number, number, number, number"
			},
			"delay_call": {
				"description": "Executes the callback after delay seconds, passing the arguments to it."
			},
			"color_log": {
				"description": "Logs a colored message to console. End the string with \\0 to prevent it from adding a newline."
			},
			"log": {
				"description": "Logs a message to console in the [gamesense] format."
			},
			"exec": {
				"description": "Executes a console command. Multiple commands can be combined with ';'. Be careful when passing user input (including usernames) to it."
			}
		},
		"globals": {
			"chokedcommands": {
				"name": "globals.chokedcommands",
				"description": "Returns the current number of commands that are being held back.",
				"args": []
			},
			"oldcommandack": {
				"name": "globals.oldcommandack",
				"description": "Returns the previous server acknowledged command number."
			},
			"commandack": {
				"name": "globals.commandack",
				"description": "Returns the number of the command the server last acknowledged."
			}
		},
		"renderer": {
			"texture": {
				"description": "Draws a texture from the texture id created from load_png, load_jpg or load_svg"
			},
			"load_png": {
				"name": "renderer.load_png",
				"description": "Returns a texture ID that can be used with renderer.texture, or nil on failure",
				"args": [
					{
						"name": "contents",
						"description": "Raw PNG file contents"
					}
				]
			},
			"load_jpg": {
				"name": "renderer.load_jpg",
				"description": "Returns a texture ID that can be used with renderer.texture, or nil on failure",
				"args": [
					{
						"name": "contents",
						"description": "Raw JPG file contents"
					}
				]
			}
		},
		"materialsystem": {
			"arms_material": {
				"name": "materialsystem.arms_material",
				"description": "Returns the players hand cham material as an object."
			},
			"chams_material": {
				"name": "materialsystem.chams_material",
				"description": "Returns the players cham material as an object."
			},
			"find_material": {
				"name": "materialsystem.find_material",
				"description": "Returns a material object for the specified material.",
				"args": [
					{
						"name": "material",
						"description": "The name of the material."
					}
				]
			},
			"find_materials": {
				"name": "materialsystem.find_materials",
				"description": "Returns all material objects that contain the specified material.",
				"args": [
					{
						"name": "materials",
						"description": "The substring that the material name must contain."
					}
				]
			},
			"find_texture": {
				"name": "materialsystem.find_texture",
				"description": "Returns a texture object for the specified material.",
				"args": [
					{
						"name": "material",
						"description": "The name of the material."
					}
				]
			},
			"get_model_materials": {
				"name": "materialsystem.get_model_materials",
				"description": "Returns all material objects for a specified entity.",
				"args": [
					{
						"name": "entindex",
						"description": "The entity whos materials will be returned."
					}
				]
			},
			"override_material": {
				"name": "materialsystem.override_material",
				"description": "Overrides all of a material properties with another material.",
				"args": [
					{
						"name": "entindex",
						"description": "The entity whos materials will be returned."
					}
				]
			},
			"alpha_modulate": {
				"name": "material_object:alpha_modulate",
				"description": "Overrides the alpha of the material object it's called on. Doesn't work with some materials",
				"args": [
					{
						"name": "a",
						"description": "New alpha value of the material (0-255)"
					}
				]
			},
			"color_modulate": {
				"name": "material_object:color_modulate",
				"description": "Overrides the color of the material object it's called on. Doesn't work with some materials",
				"args": [
					{
						"name": "r",
						"description": "New red value of the material (0-255)"
					},
					{
						"name": "g",
						"description": "New green value of the material (0-255)"
					},
					{
						"name": "b",
						"description": "New blue value of the material (0-255)"
					}
				]
			},
			"reload": {
				"name": "material_object:reload",
				"description": "Restores the original material properties of the material it's called on."
			},
			"get_material_var_flag": {
				"name": "material_object:get_material_var_flag",
				"description": "Returns the boolean value of the material var flag",
				"args": [
					{
						"name": "material_var_flag",
						"description": "Material var flag as number"
					}
				]
			},
			"set_material_var_flag": {
				"name": "material_object:set_material_var_flag",
				"description": "Sets the value of the material var flag of the material",
				"args": [
					{
						"name": "material_var_flag",
						"description": "Material var flag as number"
					},
					{
						"name": "value",
						"description": "New boolean value of the material var flag"
					}
				]
			},
			"get_shader_param": {
				"name": "material_object:get_shader_param",
				"description": "Returns the value of the shader param or nil",
				"args": [
					{
						"name": "shader_param",
						"description": "Shader param name"
					}
				],
				"return_type": "any"
			},
			"set_shader_param": {
				"name": "material_object:set_shader_param",
				"description": "Sets the value of the shader param of the material",
				"args": [
					{
						"name": "shader_param",
						"description": "Shader param name"
					},
					{
						"name": "value",
						"description": "New value of the shader param"
					}
				]
			}
		},
		"ui": {
			"new_listbox": {
				"name": "ui.new_listbox",
				"description": "Returns a special value that can be passed to ui.get and ui.set, or throws an error on failure.",
				"args": [
					{
						"name": "tab",
						"description": "The name of the tab: AA, RAGE, LEGIT, MISC, PLAYERS, SKINS, or VISUALS."
					},
					{
						"name": "container",
						"description": "The name of the existing container to which this control will be added."
					},
					{
						"name": "name",
						"description": "The name of the listbox."
					},
					{
						"name": "...",
						"description": "One or more comma separated string values that will be added to the listbox. Alternatively, a table of strings that will be added."
					}
				]
			},
			"name": {
				"name": "ui.name",
				"description": "Returns the name of the menu item reference passed to it. Throws an error on failure.",
				"args": [
					{
						"name": "item",
						"description": "The special value returned by ui.new_checkbox, ui.new_slider, ui.new_combobox, ui.new_hotkey, or ui.reference."
					}
				]
			},
			"set_callback": {
				"description": "Sets the change callback of a custom menu item. It will be executed on change and passed the reference"
			},
			"set_visible": {
				"description": "Sets the visibility of the menu item"
			}
		},
		"entity": {
			"set_prop": {
				"description": "Sets the value of the property. For vectors or angles, pass three values."
			}
		}
	},
	"globals_descriptions": {
		"bit": "LuaJIT library for bitwise operations",
		"client": "General game- and cheat-related functions",
		"ui": "Functions for interfacing with the gamesense menu",
		"renderer": "Functions for drawing visuals. Usually won't work outside the `paint` event.",
		"entity": "Functions for getting and setting entities and entity data.",
		"cvar": "A table letting you get and set the value of cvars and invoke their callbacks. Uses Object-oriented format",
		"globals": "Functions for getting game globals such as the server time and map name.",
		"materialsystem": "Functions controlling the CS:GO Material System, letting you modulate, swap, remove materials and set their shader params / material vars"
	},
	"globals_examples": {
		"cvar": [
			{
				"title": "cvar-1.lua",
				"contents": [
					"```lua",
					"local bxor = bit.bxor",
					"local cl_fullupdate = cvar.cl_fullupdate",
					"local developer = cvar.developer",
					"",
					"-- invoking callback of ConCommand",
					"cl_fullupdate.invoke_callback()",
					"-- toggle ConVar",
					"local oldval = developer.get_int()",
					"developer.set_raw_int(bxor(oldval, 1))",
					"```"
				]
			},
			{
				"title": "cvar-2.lua",
				"contents": [
					"```lua",
					"local snd_setmixer = cvar.snd_setmixer",
					"",
					"-- Mutes ambient volume by setting the mixer \"vol\" option to 0",
					"snd_setmixer:invoke_callback(\"Ambient\", \"vol\", \"0\")",
					"```"
				]
			}
		],
		"materialsystem": [
			{
				"title": "materialsystem-1.lua",
				"contents": [
					"```lua",
					"-- materialsystem example here",
					"```"
				]
			}
		]
	},
	"globals_replacements": {
		"function_descriptions": [],
		"function_arg_descriptions": [
			["AA, RAGE, LEGIT, MISC, PLAYERS, SKINS, or VISUALS", "AA, RAGE, LEGIT, MISC, PLAYERS, SKINS, VISUALS or LUA"]
		]
	}
}
